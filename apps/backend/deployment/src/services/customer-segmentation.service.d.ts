import { SegmentationRequest, SegmentationResponse, SegmentMigration, SegmentPerformanceMetrics } from '../interfaces/customer-segmentation.interface';
export declare class CustomerSegmentationService {
    private readonly logger;
    private readonly bedrock;
    private readonly cache;
    private readonly monitoring;
    private readonly kinesisStreamingService;
    private segments;
    private customerAssignments;
    constructor();
    private initializePredefinedSegments;
    segmentCustomers(request: SegmentationRequest): Promise<SegmentationResponse>;
    private segmentSingleCustomer;
    private segmentMultipleCustomers;
    private clusterBasedSegmentation;
    private performKMeansClustering;
    private extractCustomerFeatures;
    private applyRuleBasedSegmentation;
    private getAISegmentRecommendation;
    private getSegmentCharacteristics;
    private getSegmentRecommendationStrategy;
    private featuresToVector;
    private euclideanDistance;
    private calculateCentroid;
    private calculateVariance;
    private calculateSilhouetteScore;
    private mapClusterToSegment;
    private getMostFrequent;
    private calculateSegmentationStatistics;
    private updateSegmentStatistics;
    private getMigrationReason;
    private getCustomerPurchases;
    private getCachedSegmentation;
    private cacheSegmentationResults;
    private segmentAllCustomers;
    getSegmentPerformance(segmentId: string): Promise<SegmentPerformanceMetrics>;
    trackSegmentMigration(migration: SegmentMigration): Promise<void>;
    private publishSegmentUpdateEvent;
    private getSegmentReasonCodes;
}
