AWSTemplateFormatVersion: '2010-09-09'
Description: 'OMNIX AI - Comprehensive Data Retrieval Monitoring for Production'

Parameters:
  Environment:
    Type: String
    Default: 'prod'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'
  
  LambdaFunctionName:
    Type: String
    Default: 'omnix-ai-backend-dev'
    Description: 'Lambda function name for monitoring'
  
  AlertEmail:
    Type: String
    Default: 'admin@omnix.ai'
    Description: 'Email address for alerts'
  
  APIGatewayId:
    Type: String
    Default: '4j4yb4b844'
    Description: 'API Gateway ID for monitoring'
  
  APIGatewayStageName:
    Type: String
    Default: 'prod'
    Description: 'API Gateway stage name'

Resources:
  # SNS Topic for Critical Alerts
  CriticalAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'omnix-ai-critical-alerts-${Environment}'
      DisplayName: 'OMNIX AI Critical Alerts'
      KmsMasterKeyId: alias/aws/sns

  # SNS Topic for Business Intelligence Alerts
  BusinessAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'omnix-ai-business-alerts-${Environment}'
      DisplayName: 'OMNIX AI Business Intelligence Alerts'
      KmsMasterKeyId: alias/aws/sns

  # SNS Topic for Performance Alerts
  PerformanceAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'omnix-ai-performance-alerts-${Environment}'
      DisplayName: 'OMNIX AI Performance Alerts'
      KmsMasterKeyId: alias/aws/sns

  # Email Subscription for Critical Alerts
  CriticalEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref CriticalAlertsTopic
      Endpoint: !Ref AlertEmail

  # Email Subscription for Business Alerts
  BusinessEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref BusinessAlertsTopic
      Endpoint: !Ref AlertEmail

  # Email Subscription for Performance Alerts
  PerformanceEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref PerformanceAlertsTopic
      Endpoint: !Ref AlertEmail

  # Custom Metrics for Data Accuracy
  DataAccuracyMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunctionName}'
      FilterPattern: '[timestamp, requestId, level="ERROR", message="Database Error*"]'
      MetricTransformations:
        - MetricNamespace: 'OMNIX/DataRetrieval'
          MetricName: 'DataAccuracyErrors'
          MetricValue: '1'
          DefaultValue: 0

  # Custom Metrics for Business Revenue Calculations
  RevenueCalculationMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunctionName}'
      FilterPattern: '[timestamp, requestId, level="INFO", message="Dashboard summary*"]'
      MetricTransformations:
        - MetricNamespace: 'OMNIX/Business'
          MetricName: 'RevenueCalculations'
          MetricValue: '1'
          DefaultValue: 0

  # Custom Metrics for Cache Hit Rate
  CacheHitMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunctionName}'
      FilterPattern: '[timestamp, requestId, level, message="Using cached data*"]'
      MetricTransformations:
        - MetricNamespace: 'OMNIX/Performance'
          MetricName: 'CacheHits'
          MetricValue: '1'
          DefaultValue: 0

  # Custom Metrics for Cache Miss Rate
  CacheMissMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunctionName}'
      FilterPattern: '[timestamp, requestId, level, message="Fetching fresh data*"]'
      MetricTransformations:
        - MetricNamespace: 'OMNIX/Performance'
          MetricName: 'CacheMisses'
          MetricValue: '1'
          DefaultValue: 0

  # Lambda Function Error Rate Alarm (Critical)
  LambdaHighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'OMNIX-${Environment}-Lambda-High-Error-Rate'
      AlarmDescription: 'Lambda function error rate is critically high'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunctionName
      AlarmActions:
        - !Ref CriticalAlertsTopic
      TreatMissingData: notBreaching

  # Lambda Function Duration Alarm (Performance)
  LambdaHighDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'OMNIX-${Environment}-Lambda-High-Duration'
      AlarmDescription: 'Lambda function duration is above acceptable limits'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 10000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunctionName
      AlarmActions:
        - !Ref PerformanceAlertsTopic
      TreatMissingData: notBreaching

  # Lambda Function Throttling Alarm (Critical)
  LambdaThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'OMNIX-${Environment}-Lambda-Throttles'
      AlarmDescription: 'Lambda function is being throttled'
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunctionName
      AlarmActions:
        - !Ref CriticalAlertsTopic
      TreatMissingData: notBreaching

  # API Gateway 4XX Error Alarm
  APIGateway4XXErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'OMNIX-${Environment}-API-4XX-Errors'
      AlarmDescription: 'API Gateway 4XX error rate is high'
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 20
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref APIGatewayId
        - Name: Stage
          Value: !Ref APIGatewayStageName
      AlarmActions:
        - !Ref PerformanceAlertsTopic
      TreatMissingData: notBreaching

  # API Gateway 5XX Error Alarm (Critical)
  APIGateway5XXErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'OMNIX-${Environment}-API-5XX-Errors'
      AlarmDescription: 'API Gateway 5XX error rate is critically high'
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref APIGatewayId
        - Name: Stage
          Value: !Ref APIGatewayStageName
      AlarmActions:
        - !Ref CriticalAlertsTopic
      TreatMissingData: notBreaching

  # API Gateway Latency Alarm
  APIGatewayLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'OMNIX-${Environment}-API-High-Latency'
      AlarmDescription: 'API Gateway latency is above SLA threshold'
      MetricName: Latency
      Namespace: AWS/ApiGateway
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 2000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref APIGatewayId
        - Name: Stage
          Value: !Ref APIGatewayStageName
      AlarmActions:
        - !Ref PerformanceAlertsTopic
      TreatMissingData: notBreaching

  # Data Accuracy Alarm
  DataAccuracyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'OMNIX-${Environment}-Data-Accuracy-Issues'
      AlarmDescription: 'Data accuracy errors detected in data retrieval operations'
      MetricName: DataAccuracyErrors
      Namespace: OMNIX/DataRetrieval
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 3
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref BusinessAlertsTopic
      TreatMissingData: notBreaching

  # Cache Performance Alarm
  LowCacheHitRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'OMNIX-${Environment}-Low-Cache-Hit-Rate'
      AlarmDescription: 'Cache hit rate is below optimal threshold'
      MetricName: CacheHits
      Namespace: OMNIX/Performance
      Statistic: Sum
      Period: 900
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref PerformanceAlertsTopic
      TreatMissingData: breaching

  # DynamoDB Read Throttling Alarm
  DynamoDBReadThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'OMNIX-${Environment}-DynamoDB-Read-Throttles'
      AlarmDescription: 'DynamoDB read operations are being throttled'
      MetricName: ReadThrottleEvents
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: TableName
          Value: 'omnix-ai-products-dev'
      AlarmActions:
        - !Ref CriticalAlertsTopic
      TreatMissingData: notBreaching

  # DynamoDB Write Throttling Alarm
  DynamoDBWriteThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'OMNIX-${Environment}-DynamoDB-Write-Throttles'
      AlarmDescription: 'DynamoDB write operations are being throttled'
      MetricName: WriteThrottleEvents
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: TableName
          Value: 'omnix-ai-dev-orders'
      AlarmActions:
        - !Ref CriticalAlertsTopic
      TreatMissingData: notBreaching

  # Business Intelligence Dashboard
  BusinessIntelligenceDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub 'OMNIX-AI-Business-Intelligence-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "OMNIX/Business", "RevenueCalculations", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Revenue Calculations Per Hour",
                "period": 3600,
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaFunctionName}", { "stat": "Sum" } ],
                  [ ".", "Duration", ".", ".", { "stat": "Average" } ],
                  [ ".", "Errors", ".", ".", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Function Performance",
                "period": 300,
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "OMNIX/Performance", "CacheHits", { "stat": "Sum", "color": "#2ca02c" } ],
                  [ ".", "CacheMisses", { "stat": "Sum", "color": "#ff7f0e" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Cache Performance",
                "period": 300,
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "omnix-ai-products-dev", { "stat": "Sum" } ],
                  [ ".", ".", ".", "omnix-ai-dev-orders", { "stat": "Sum" } ],
                  [ ".", ".", ".", "omnix-ai-cdk-streaming-analytics-dev-20250820T1533", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "DynamoDB Read Capacity Usage",
                "period": 300,
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 12,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/lambda/${LambdaFunctionName}'\n| fields @timestamp, @message\n| filter @message like /ERROR/\n| sort @timestamp desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "Recent Errors",
                "view": "table"
              }
            }
          ]
        }

  # Technical Performance Dashboard
  TechnicalPerformanceDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub 'OMNIX-AI-Technical-Performance-${Environment}'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${LambdaFunctionName}", { "stat": "Average" } ],
                  [ ".", ".", ".", ".", { "stat": "Maximum" } ],
                  [ ".", ".", ".", ".", { "stat": "Minimum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Duration",
                "period": 300,
                "annotations": {
                  "horizontal": [
                    {
                      "label": "SLA Target (2s)",
                      "value": 2000
                    }
                  ]
                }
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Latency", "ApiName", "${APIGatewayId}", "Stage", "${APIGatewayStageName}", { "stat": "Average" } ],
                  [ ".", ".", ".", ".", ".", ".", { "stat": "Maximum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Latency",
                "period": 300,
                "annotations": {
                  "horizontal": [
                    {
                      "label": "SLA Target (500ms)",
                      "value": 500
                    }
                  ]
                }
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Errors", "FunctionName", "${LambdaFunctionName}", { "stat": "Sum" } ],
                  [ ".", "Throttles", ".", ".", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Errors & Throttles",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/DynamoDB", "SuccessfulRequestLatency", "TableName", "omnix-ai-products-dev", "Operation", "Scan", { "stat": "Average" } ],
                  [ ".", ".", ".", "omnix-ai-dev-orders", ".", ".", { "stat": "Average" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "DynamoDB Request Latency",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "OMNIX/DataRetrieval", "DataAccuracyErrors", { "stat": "Sum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Data Accuracy Issues",
                "period": 300
              }
            }
          ]
        }

Outputs:
  CriticalAlertsTopicArn:
    Description: 'ARN of the Critical Alerts SNS Topic'
    Value: !Ref CriticalAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-CriticalAlertsTopicArn'

  BusinessAlertsTopicArn:
    Description: 'ARN of the Business Alerts SNS Topic'
    Value: !Ref BusinessAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-BusinessAlertsTopicArn'

  PerformanceAlertsTopicArn:
    Description: 'ARN of the Performance Alerts SNS Topic'
    Value: !Ref PerformanceAlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-PerformanceAlertsTopicArn'

  BusinessIntelligenceDashboardURL:
    Description: 'URL to the Business Intelligence Dashboard'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=OMNIX-AI-Business-Intelligence-${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-BusinessIntelligenceDashboardURL'

  TechnicalPerformanceDashboardURL:
    Description: 'URL to the Technical Performance Dashboard'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=OMNIX-AI-Technical-Performance-${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-TechnicalPerformanceDashboardURL'