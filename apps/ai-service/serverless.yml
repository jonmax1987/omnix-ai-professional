# Serverless Framework configuration for OMNIX AI Lambda
service: omnix-ai-forecasting

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11
  architecture: x86_64
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 1024
  timeout: 30
  
  # Environment variables
  environment:
    STAGE: ${self:provider.stage}
    SERVICE: ${self:service}
    PYTHONPATH: /var/runtime:/var/task
    
  # IAM permissions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/omnix-products-${self:provider.stage}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/omnix-forecasts-${self:provider.stage}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/omnix-historical-data-${self:provider.stage}
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: 
            - arn:aws:logs:${aws:region}:${aws:accountId}:log-group:/aws/lambda/*
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
          Resource:
            - arn:aws:sqs:${aws:region}:${aws:accountId}:omnix-forecasting-queue-${self:provider.stage}

functions:
  # Main forecasting function
  forecast:
    handler: lambda_function.lambda_handler
    name: omnix-ai-forecast-${self:provider.stage}
    description: "OMNIX AI Demand Forecasting and Recommendations Engine"
    events:
      - httpApi:
          path: /v1/ai/forecast
          method: post
          cors: true
      - httpApi:
          path: /v1/ai/recommendations
          method: post
          cors: true
      # SQS trigger for batch processing
      - sqs:
          arn: arn:aws:sqs:${aws:region}:${aws:accountId}:omnix-forecasting-queue-${self:provider.stage}
          batchSize: 10
    layers:
      - ${cf:aws-lambda-python-layer.PythonRequirementsLambdaLayerQualifiedArn}
      
  # Scheduled batch forecasting
  batchForecast:
    handler: batch_forecast.lambda_handler
    name: omnix-ai-batch-forecast-${self:provider.stage}
    description: "Daily batch forecasting for all products"
    timeout: 900  # 15 minutes
    memorySize: 2048
    events:
      - schedule:
          rate: cron(0 2 * * ? *)  # Run daily at 2 AM UTC
          enabled: true
    layers:
      - ${cf:aws-lambda-python-layer.PythonRequirementsLambdaLayerQualifiedArn}

# Resources
resources:
  Resources:
    # SQS Queue for forecasting tasks
    ForecastingQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: omnix-forecasting-queue-${self:provider.stage}
        VisibilityTimeoutSeconds: 180
        MessageRetentionPeriod: 1209600  # 14 days
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt ForecastingDeadLetterQueue.Arn
          maxReceiveCount: 3
          
    # Dead letter queue
    ForecastingDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: omnix-forecasting-dlq-${self:provider.stage}
        MessageRetentionPeriod: 1209600
        
    # DynamoDB table for forecast results
    ForecastsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: omnix-forecasts-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
          - AttributeName: forecast_date
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
          - AttributeName: forecast_date
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: forecast-date-index
            KeySchema:
              - AttributeName: forecast_date
                KeyType: HASH
              - AttributeName: product_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        Tags:
          - Key: Service
            Value: omnix-ai
          - Key: Environment
            Value: ${self:provider.stage}
            
    # DynamoDB table for historical demand data
    HistoricalDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: omnix-historical-data-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        Tags:
          - Key: Service
            Value: omnix-ai
          - Key: Environment
            Value: ${self:provider.stage}

# Plugins
plugins:
  - serverless-python-requirements
  - serverless-offline

custom:
  # Python requirements configuration
  pythonRequirements:
    dockerizePip: true
    layer: 
      name: aws-lambda-python-layer
      description: Python dependencies for OMNIX AI Lambda
      compatibleRuntimes:
        - python3.11
      licenseInfo: MIT
      allowedAccounts:
        - ${aws:accountId}
    slim: true
    strip: false
    pipCmdExtraArgs:
      - --no-cache-dir
    usePipenv: false
    usePoetry: false
    
  # Serverless offline configuration
  serverless-offline:
    httpPort: 3002
    lambdaPort: 3003