AWSTemplateFormatVersion: '2010-09-09'
Description: 'OMNIX AI - Simplified Monitoring Stack'

Parameters:
  Environment:
    Type: String
    Default: staging
    Description: Environment name
  
  ProjectName:
    Type: String
    Default: omnix-ai
    Description: Project name for resource naming
  
  AlertEmail:
    Type: String
    Default: alerts@omnix.ai
    Description: Email address for alerts
  
  CloudFrontDistributionId:
    Type: String
    Description: CloudFront Distribution ID to monitor
  
  S3BucketName:
    Type: String
    Description: S3 bucket name to monitor

Resources:
  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-${Environment}-alerts'
      DisplayName: !Sub '${ProjectName} ${Environment} Alerts'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # SNS Email Subscription
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlertTopic
      Protocol: email
      Endpoint: !Ref AlertEmail

  # CloudWatch Dashboard
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-${Environment}-monitoring'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/CloudFront", "Requests", "DistributionId", "${CloudFrontDistributionId}" ],
                  [ ".", "BytesDownloaded", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "us-east-1",
                "title": "CloudFront Metrics",
                "period": 300,
                "stat": "Sum"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/CloudFront", "4xxErrorRate", "DistributionId", "${CloudFrontDistributionId}" ],
                  [ ".", "5xxErrorRate", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "us-east-1",
                "title": "CloudFront Error Rates",
                "period": 300,
                "stat": "Average"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/S3", "NumberOfObjects", "BucketName", "${S3BucketName}", "StorageType", "AllStorageTypes" ],
                  [ ".", "BucketSizeBytes", ".", ".", ".", "StandardStorage" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "S3 Bucket Metrics",
                "period": 86400,
                "stat": "Average"
              }
            }
          ]
        }

  # CloudFront Error Rate Alarm
  CloudFrontErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-cloudfront-error-rate'
      AlarmDescription: 'CloudFront 4xx/5xx error rate is too high'
      MetricName: 4xxErrorRate
      Namespace: AWS/CloudFront
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DistributionId
          Value: !Ref CloudFrontDistributionId
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # CloudFront Cache Hit Rate Alarm
  CloudFrontCacheHitRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-cloudfront-cache-hit-rate'
      AlarmDescription: 'CloudFront cache hit rate is too low'
      MetricName: CacheHitRate
      Namespace: AWS/CloudFront
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 70
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: DistributionId
          Value: !Ref CloudFrontDistributionId
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching

  # Custom Metrics Lambda Function
  MetricsCollectorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-metrics-collector'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt MetricsCollectorRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          from datetime import datetime, timedelta

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          cloudwatch = boto3.client('cloudwatch')

          def lambda_handler(event, context):
              try:
                  # Get environment variables
                  project = event.get('project', 'omnix-ai')
                  environment = event.get('environment', 'staging')
                  
                  logger.info(f"Collecting custom metrics for {project}-{environment}")
                  
                  # Custom metric: Deployment timestamp
                  cloudwatch.put_metric_data(
                      Namespace=f'{project}/{environment}',
                      MetricData=[
                          {
                              'MetricName': 'DeploymentTimestamp',
                              'Value': datetime.now().timestamp(),
                              'Unit': 'None',
                              'Dimensions': [
                                  {
                                      'Name': 'Environment',
                                      'Value': environment
                                  }
                              ]
                          },
                          {
                              'MetricName': 'HealthCheck',
                              'Value': 1,
                              'Unit': 'Count',
                              'Dimensions': [
                                  {
                                      'Name': 'Environment',
                                      'Value': environment
                                  }
                              ]
                          }
                      ]
                  )
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': 'Custom metrics collected successfully',
                          'timestamp': datetime.now().isoformat()
                      })
                  }
                  
              except Exception as e:
                  logger.error(f"Error collecting metrics: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # IAM Role for Metrics Collector Lambda
  MetricsCollectorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-metrics-collector-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchMetricsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                Resource: '*'

  # EventBridge Rule to trigger metrics collection
  MetricsCollectionSchedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-metrics-schedule'
      Description: 'Schedule for collecting custom metrics'
      ScheduleExpression: 'rate(5 minutes)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt MetricsCollectorFunction.Arn
          Id: 'MetricsCollectorTarget'
          Input: !Sub |
            {
              "project": "${ProjectName}",
              "environment": "${Environment}"
            }

  # Lambda Permission for EventBridge
  MetricsCollectorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MetricsCollectorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MetricsCollectionSchedule.Arn

Outputs:
  DashboardURL:
    Description: 'CloudWatch Dashboard URL'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-${Environment}-monitoring'
    Export:
      Name: !Sub '${AWS::StackName}-DashboardURL'

  AlertTopicArn:
    Description: 'SNS Alert Topic ARN'
    Value: !Ref AlertTopic
    Export:
      Name: !Sub '${AWS::StackName}-AlertTopicArn'

  MetricsCollectorFunctionArn:
    Description: 'Metrics Collector Lambda Function ARN'
    Value: !GetAtt MetricsCollectorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-MetricsCollectorFunctionArn'