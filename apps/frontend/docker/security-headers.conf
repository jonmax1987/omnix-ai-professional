# OMNIX AI - Security Headers Configuration
# Comprehensive security headers for production deployment

# Prevent clickjacking attacks
add_header X-Frame-Options "SAMEORIGIN" always;

# Prevent MIME type sniffing
add_header X-Content-Type-Options "nosniff" always;

# Enable XSS protection
add_header X-XSS-Protection "1; mode=block" always;

# Control referrer information
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# Prevent loading in frames from other origins
add_header X-Permitted-Cross-Domain-Policies "none" always;

# Feature policy (now Permissions Policy)
add_header Permissions-Policy "accelerometer=(), ambient-light-sensor=(), autoplay=(), battery=(), camera=(), cross-origin-isolated=(), display-capture=(), document-domain=(), encrypted-media=(), execution-while-not-rendered=(), execution-while-out-of-viewport=(), fullscreen=(), geolocation=(), gyroscope=(), keyboard-map=(), magnetometer=(), microphone=(), midi=(), navigation-override=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=()" always;

# Comprehensive Content Security Policy for OMNIX AI
# This policy allows the application to function while maintaining security
add_header Content-Security-Policy "
    default-src 'self';
    script-src 'self' 'unsafe-inline' 'unsafe-eval' 
        https://cdn.jsdelivr.net 
        https://unpkg.com 
        https://www.googletagmanager.com 
        https://www.google-analytics.com
        blob:;
    style-src 'self' 'unsafe-inline' 
        https://fonts.googleapis.com 
        https://cdn.jsdelivr.net;
    font-src 'self' 
        https://fonts.gstatic.com 
        https://cdn.jsdelivr.net 
        data:;
    img-src 'self' 
        data: 
        https: 
        blob:
        https://d1vu6p9f5uc16.cloudfront.net
        https://www.google-analytics.com;
    connect-src 'self' 
        https://4j4yb4b844.execute-api.eu-central-1.amazonaws.com 
        wss://5oo31khrrj.execute-api.eu-central-1.amazonaws.com
        https://d1vu6p9f5uc16.cloudfront.net
        https://staging-api.omnix.ai
        wss://staging-ws.omnix.ai
        https://www.google-analytics.com
        https://sentry.io;
    worker-src 'self' blob:;
    child-src 'self';
    object-src 'none';
    media-src 'self' data: blob:;
    form-action 'self';
    base-uri 'self';
    manifest-src 'self';
    upgrade-insecure-requests;
" always;

# HTTP Strict Transport Security (HSTS) - only if using HTTPS
# Uncomment if serving over HTTPS
# add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

# Expect-CT header for Certificate Transparency
# add_header Expect-CT "max-age=86400, enforce" always;

# Remove server information
server_tokens off;

# Additional security headers
add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive" always;

# Cache control for security-sensitive files
location ~* \.(html|htm)$ {
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header Pragma "no-cache";
    add_header Expires "0";
}

# Prevent access to sensitive files
location ~* \.(env|log|config|ini|yaml|yml|json|bak|swp|tmp)$ {
    deny all;
    access_log off;
    log_not_found off;
}

# Block user agents that are commonly used by bots/scrapers
if ($http_user_agent ~* (bot|crawler|spider|scraper)) {
    return 444;
}

# Block requests with suspicious headers
if ($http_user_agent ~* (nmap|nikto|sqlmap|openvas|w3af)) {
    return 444;
}

# Block suspicious query strings
if ($args ~* (union|select|insert|cast|set|declare|drop|update|md5|benchmark)) {
    return 444;
}

# Rate limiting rules
limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;

# Apply rate limiting to sensitive endpoints
location ~* ^/(login|register|forgot-password|api/auth) {
    limit_req zone=login burst=3 nodelay;
}

location ~* ^/api/ {
    limit_req zone=api burst=10 nodelay;
}

# CORS headers for API endpoints
location ~* ^/api/ {
    add_header Access-Control-Allow-Origin "$http_origin" always;
    add_header Access-Control-Allow-Credentials "true" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, HEAD" always;
    add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control, Pragma" always;
    add_header Access-Control-Max-Age "86400" always;
    
    # Handle preflight OPTIONS requests
    if ($request_method = OPTIONS) {
        return 204;
    }
}