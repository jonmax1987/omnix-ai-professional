#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.monitoringStack = exports.streamingStack = exports.coreStack = void 0;
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const core_stack_1 = require("../lib/stacks/core-stack");
const streaming_stack_1 = require("../lib/stacks/streaming-stack");
const monitoring_stack_1 = require("../lib/stacks/monitoring-stack");
const environment_1 = require("../lib/config/environment");
// Get environment from context or default to 'dev'
const envName = process.env.CDK_ENV || process.env.NODE_ENV || 'dev';
const config = (0, environment_1.getEnvironmentConfig)(envName);
const app = new cdk.App();
// Get environment from CDK context
const contextEnv = app.node.tryGetContext('env') || envName;
const finalConfig = (0, environment_1.getEnvironmentConfig)(contextEnv);
// Define AWS environment
const env = {
    account: finalConfig.account || process.env.CDK_DEFAULT_ACCOUNT,
    region: finalConfig.region,
};
// Stack naming convention
const getStackName = (stackType, stage) => {
    return `omnix-ai-${stackType}-${stage}`;
};
// Core Stack - Contains Lambda, API Gateway, DynamoDB, Secrets
const coreStack = new core_stack_1.CoreStack(app, getStackName('core', finalConfig.stage), {
    config: finalConfig,
    env,
    description: `OMNIX AI Core Infrastructure - ${finalConfig.stage}`,
    tags: {
        Environment: finalConfig.stage,
        Project: 'omnix-ai',
        Component: 'core',
        Owner: 'engineering-team',
        CostCenter: 'product-development',
        ManagedBy: 'aws-cdk',
    },
});
exports.coreStack = coreStack;
// Streaming Stack - Contains Kinesis, SQS, EventBridge
const streamingStack = new streaming_stack_1.StreamingStack(app, getStackName('streaming', finalConfig.stage), {
    config: finalConfig,
    lambdaFunction: coreStack.lambdaFunction.function,
    env,
    description: `OMNIX AI Streaming Infrastructure - ${finalConfig.stage}`,
    tags: {
        Environment: finalConfig.stage,
        Project: 'omnix-ai',
        Component: 'streaming',
        Owner: 'engineering-team',
        CostCenter: 'product-development',
        ManagedBy: 'aws-cdk',
    },
});
exports.streamingStack = streamingStack;
// Add dependency - Streaming stack depends on Core stack
streamingStack.addDependency(coreStack);
// Monitoring Stack - Contains CloudWatch, SNS, Alarms
const monitoringStack = new monitoring_stack_1.MonitoringStack(app, getStackName('monitoring', finalConfig.stage), {
    config: finalConfig,
    lambdaFunction: coreStack.lambdaFunction.function,
    restApi: coreStack.apiGateway.restApi,
    dynamodbTables: [
        coreStack.dynamodbTables.usersTable,
        coreStack.dynamodbTables.productsTable,
        coreStack.dynamodbTables.ordersTable,
        coreStack.dynamodbTables.inventoryTable,
        coreStack.dynamodbTables.sessionsTable,
        coreStack.dynamodbTables.customerProfilesTable,
        coreStack.dynamodbTables.purchaseHistoryTable,
        coreStack.dynamodbTables.productInteractionsTable,
        coreStack.dynamodbTables.recommendationsTable,
        coreStack.dynamodbTables.abTestResultsTable,
        coreStack.dynamodbTables.costAnalyticsTable,
        coreStack.dynamodbTables.segmentationTable,
        coreStack.dynamodbTables.streamingAnalyticsTable,
        coreStack.dynamodbTables.aiAnalysisHistoryTable,
    ],
    kinesisStreams: [
        streamingStack.kinesisStreams.customerEventsStream,
        streamingStack.kinesisStreams.analyticsStream,
    ],
    sqsQueues: [
        streamingStack.sqsQueues.aiAnalysisQueue,
        streamingStack.sqsQueues.batchProcessingQueue,
        streamingStack.sqsQueues.notificationQueue,
        streamingStack.sqsQueues.segmentationQueue,
        streamingStack.sqsQueues.aiAnalysisDLQ,
        streamingStack.sqsQueues.batchProcessingDLQ,
        streamingStack.sqsQueues.notificationDLQ,
        streamingStack.sqsQueues.segmentationDLQ,
    ],
    env,
    description: `OMNIX AI Monitoring Infrastructure - ${finalConfig.stage}`,
    tags: {
        Environment: finalConfig.stage,
        Project: 'omnix-ai',
        Component: 'monitoring',
        Owner: 'engineering-team',
        CostCenter: 'product-development',
        ManagedBy: 'aws-cdk',
    },
});
exports.monitoringStack = monitoringStack;
// Add dependencies - Monitoring stack depends on both Core and Streaming stacks
monitoringStack.addDependency(coreStack);
monitoringStack.addDependency(streamingStack);
// Add global tags to all resources
cdk.Tags.of(app).add('Project', 'omnix-ai');
cdk.Tags.of(app).add('Environment', finalConfig.stage);
cdk.Tags.of(app).add('ManagedBy', 'aws-cdk');
cdk.Tags.of(app).add('Repository', 'omnix-ai-infrastructure');
cdk.Tags.of(app).add('Owner', 'engineering-team');
// Add cost allocation tags for production
if (finalConfig.stage === 'prod') {
    cdk.Tags.of(app).add('CostCenter', 'product-development');
    cdk.Tags.of(app).add('BusinessUnit', 'ai-analytics');
    cdk.Tags.of(app).add('BillingCode', 'omnix-prod-infra');
}
// Add development tags for non-production environments
if (finalConfig.stage !== 'prod') {
    cdk.Tags.of(app).add('AutoDelete', 'true');
    cdk.Tags.of(app).add('DeveloperAccess', 'true');
}
// Synthesis and validation
app.synth();
// Log deployment information
console.log(`
ðŸš€ OMNIX AI Infrastructure Deployment Configuration
================================================

Environment: ${finalConfig.stage}
Region: ${finalConfig.region}
Account: ${env.account || 'Using default account'}

Stacks to be deployed:
â”œâ”€â”€ Core Stack (${getStackName('core', finalConfig.stage)})
â”‚   â”œâ”€â”€ Lambda Function: omnix-ai-backend-${finalConfig.stage}
â”‚   â”œâ”€â”€ REST API: omnix-ai-api-${finalConfig.stage}
â”‚   â”œâ”€â”€ WebSocket API: omnix-ai-websocket-${finalConfig.stage}
â”‚   â”œâ”€â”€ DynamoDB Tables: 14 tables with GSIs
â”‚   â””â”€â”€ Secrets Manager: JWT, API keys, external credentials
â”‚
â”œâ”€â”€ Streaming Stack (${getStackName('streaming', finalConfig.stage)})
â”‚   â”œâ”€â”€ Kinesis Streams: Customer events (${finalConfig.kinesisShardCount} shards)
â”‚   â”œâ”€â”€ SQS Queues: AI analysis, batch processing, notifications
â”‚   â””â”€â”€ EventBridge: Custom event bus for decoupled architecture
â”‚
â””â”€â”€ Monitoring Stack (${getStackName('monitoring', finalConfig.stage)})
    â”œâ”€â”€ CloudWatch: Dashboards, alarms, custom metrics
    â”œâ”€â”€ SNS: Alert notifications
    â””â”€â”€ Scheduled Events: Cleanup, reporting, health checks

Configuration:
- Lambda Memory: ${finalConfig.lambdaMemorySize} MB
- Lambda Timeout: ${finalConfig.lambdaTimeout} seconds
- DynamoDB Billing: ${finalConfig.dynamodbBillingMode}
- Monitoring: ${finalConfig.enableMonitoring ? 'Enabled' : 'Disabled'}
- X-Ray Tracing: ${finalConfig.enableXRay ? 'Enabled' : 'Disabled'}
- Log Retention: ${finalConfig.logRetentionDays} days

AWS Bedrock Configuration:
- Bedrock Region: ${finalConfig.bedrockRegion}
- Primary Model: Claude 3 Haiku (cost-optimized)
- Fallback Model: Claude 3 Sonnet (higher accuracy)

Deployment Commands:
- Deploy All: npm run deploy:${finalConfig.stage}
- Deploy Core: cdk deploy ${getStackName('core', finalConfig.stage)}
- Deploy Streaming: cdk deploy ${getStackName('streaming', finalConfig.stage)}
- Deploy Monitoring: cdk deploy ${getStackName('monitoring', finalConfig.stage)}

Next Steps:
1. Ensure AWS credentials are configured
2. Build Lambda function: cd ../backend && npm run build
3. Deploy infrastructure: npm run deploy:${finalConfig.stage}
4. Run post-deployment scripts for data seeding
5. Configure external API keys in Secrets Manager
6. Set up monitoring alerts and notifications

================================================
`);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vYmluL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsdUNBQXFDO0FBQ3JDLG1DQUFtQztBQUNuQyx5REFBcUQ7QUFDckQsbUVBQStEO0FBQy9ELHFFQUFpRTtBQUNqRSwyREFBaUU7QUFFakUsbURBQW1EO0FBQ25ELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQztBQUNyRSxNQUFNLE1BQU0sR0FBRyxJQUFBLGtDQUFvQixFQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRTdDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLG1DQUFtQztBQUNuQyxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUM7QUFDNUQsTUFBTSxXQUFXLEdBQUcsSUFBQSxrQ0FBb0IsRUFBQyxVQUFVLENBQUMsQ0FBQztBQUVyRCx5QkFBeUI7QUFDekIsTUFBTSxHQUFHLEdBQUc7SUFDVixPQUFPLEVBQUUsV0FBVyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQjtJQUMvRCxNQUFNLEVBQUUsV0FBVyxDQUFDLE1BQU07Q0FDM0IsQ0FBQztBQUVGLDBCQUEwQjtBQUMxQixNQUFNLFlBQVksR0FBRyxDQUFDLFNBQWlCLEVBQUUsS0FBYSxFQUFVLEVBQUU7SUFDaEUsT0FBTyxZQUFZLFNBQVMsSUFBSSxLQUFLLEVBQUUsQ0FBQztBQUMxQyxDQUFDLENBQUM7QUFFRiwrREFBK0Q7QUFDL0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxzQkFBUyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRTtJQUM1RSxN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Z0JBQ3JDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxVQUFVO21CQUNsRCxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFVBQVU7bUJBQy9DLFdBQVcsQ0FBQyxnQkFBZ0I7OztvQkFHM0IsV0FBVyxDQUFDLGFBQWE7Ozs7OytCQUtkLFdBQVcsQ0FBQyxLQUFLOzRCQUNwQixZQUFZLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUM7aUNBQ2xDLFlBQVksQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQztrQ0FDM0MsWUFBWSxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDOzs7OzsyQ0FLcEMsV0FBVyxDQUFDLEtBQUs7Ozs7OztDQU0zRCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlcic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQ29yZVN0YWNrIH0gZnJvbSAnLi4vbGliL3N0YWNrcy9jb3JlLXN0YWNrJztcbmltcG9ydCB7IFN0cmVhbWluZ1N0YWNrIH0gZnJvbSAnLi4vbGliL3N0YWNrcy9zdHJlYW1pbmctc3RhY2snO1xuaW1wb3J0IHsgTW9uaXRvcmluZ1N0YWNrIH0gZnJvbSAnLi4vbGliL3N0YWNrcy9tb25pdG9yaW5nLXN0YWNrJztcbmltcG9ydCB7IGdldEVudmlyb25tZW50Q29uZmlnIH0gZnJvbSAnLi4vbGliL2NvbmZpZy9lbnZpcm9ubWVudCc7XG5cbi8vIEdldCBlbnZpcm9ubWVudCBmcm9tIGNvbnRleHQgb3IgZGVmYXVsdCB0byAnZGV2J1xuY29uc3QgZW52TmFtZSA9IHByb2Nlc3MuZW52LkNES19FTlYgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ2Rldic7XG5jb25zdCBjb25maWcgPSBnZXRFbnZpcm9ubWVudENvbmZpZyhlbnZOYW1lKTtcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcblxuLy8gR2V0IGVudmlyb25tZW50IGZyb20gQ0RLIGNvbnRleHRcbmNvbnN0IGNvbnRleHRFbnYgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdlbnYnKSB8fCBlbnZOYW1lO1xuY29uc3QgZmluYWxDb25maWcgPSBnZXRFbnZpcm9ubWVudENvbmZpZyhjb250ZXh0RW52KTtcblxuLy8gRGVmaW5lIEFXUyBlbnZpcm9ubWVudFxuY29uc3QgZW52ID0ge1xuICBhY2NvdW50OiBmaW5hbENvbmZpZy5hY2NvdW50IHx8IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsXG4gIHJlZ2lvbjogZmluYWxDb25maWcucmVnaW9uLFxufTtcblxuLy8gU3RhY2sgbmFtaW5nIGNvbnZlbnRpb25cbmNvbnN0IGdldFN0YWNrTmFtZSA9IChzdGFja1R5cGU6IHN0cmluZywgc3RhZ2U6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBgb21uaXgtYWktJHtzdGFja1R5cGV9LSR7c3RhZ2V9YDtcbn07XG5cbi8vIENvcmUgU3RhY2sgLSBDb250YWlucyBMYW1iZGEsIEFQSSBHYXRld2F5LCBEeW5hbW9EQiwgU2VjcmV0c1xuY29uc3QgY29yZVN0YWNrID0gbmV3IENvcmVTdGFjayhhcHAsIGdldFN0YWNrTmFtZSgnY29yZScsIGZpbmFsQ29uZmlnLnN0YWdlKSwge1xuICBjb25maWc6IGZpbmFsQ29uZmlnLFxuICBlbnYsXG4gIGRlc2NyaXB0aW9uOiBgT01OSVggQUkgQ29yZSBJbmZyYXN0cnVjdHVyZSAtICR7ZmluYWxDb25maWcuc3RhZ2V9YCxcbiAgdGFnczoge1xuICAgIEVudmlyb25tZW50OiBmaW5hbENvbmZpZy5zdGFnZSxcbiAgICBQcm9qZWN0OiAnb21uaXgtYWknLFxuICAgIENvbXBvbmVudDogJ2NvcmUnLFxuICAgIE93bmVyOiAnZW5naW5lZXJpbmctdGVhbScsXG4gICAgQ29zdENlbnRlcjogJ3Byb2R1Y3QtZGV2ZWxvcG1lbnQnLFxuICAgIE1hbmFnZWRCeTogJ2F3cy1jZGsnLFxuICB9LFxufSk7XG5cbi8vIFN0cmVhbWluZyBTdGFjayAtIENvbnRhaW5zIEtpbmVzaXMsIFNRUywgRXZlbnRCcmlkZ2VcbmNvbnN0IHN0cmVhbWluZ1N0YWNrID0gbmV3IFN0cmVhbWluZ1N0YWNrKGFwcCwgZ2V0U3RhY2tOYW1lKCdzdHJlYW1pbmcnLCBmaW5hbENvbmZpZy5zdGFnZSksIHtcbiAgY29uZmlnOiBmaW5hbENvbmZpZyxcbiAgbGFtYmRhRnVuY3Rpb246IGNvcmVTdGFjay5sYW1iZGFGdW5jdGlvbi5mdW5jdGlvbixcbiAgZW52LFxuICBkZXNjcmlwdGlvbjogYE9NTklYIEFJIFN0cmVhbWluZyBJbmZyYXN0cnVjdHVyZSAtICR7ZmluYWxDb25maWcuc3RhZ2V9YCxcbiAgdGFnczoge1xuICAgIEVudmlyb25tZW50OiBmaW5hbENvbmZpZy5zdGFnZSxcbiAgICBQcm9qZWN0OiAnb21uaXgtYWknLFxuICAgIENvbXBvbmVudDogJ3N0cmVhbWluZycsXG4gICAgT3duZXI6ICdlbmdpbmVlcmluZy10ZWFtJyxcbiAgICBDb3N0Q2VudGVyOiAncHJvZHVjdC1kZXZlbG9wbWVudCcsXG4gICAgTWFuYWdlZEJ5OiAnYXdzLWNkaycsXG4gIH0sXG59KTtcblxuLy8gQWRkIGRlcGVuZGVuY3kgLSBTdHJlYW1pbmcgc3RhY2sgZGVwZW5kcyBvbiBDb3JlIHN0YWNrXG5zdHJlYW1pbmdTdGFjay5hZGREZXBlbmRlbmN5KGNvcmVTdGFjayk7XG5cbi8vIE1vbml0b3JpbmcgU3RhY2sgLSBDb250YWlucyBDbG91ZFdhdGNoLCBTTlMsIEFsYXJtc1xuY29uc3QgbW9uaXRvcmluZ1N0YWNrID0gbmV3IE1vbml0b3JpbmdTdGFjayhhcHAsIGdldFN0YWNrTmFtZSgnbW9uaXRvcmluZycsIGZpbmFsQ29uZmlnLnN0YWdlKSwge1xuICBjb25maWc6IGZpbmFsQ29uZmlnLFxuICBsYW1iZGFGdW5jdGlvbjogY29yZVN0YWNrLmxhbWJkYUZ1bmN0aW9uLmZ1bmN0aW9uLFxuICByZXN0QXBpOiBjb3JlU3RhY2suYXBpR2F0ZXdheS5yZXN0QXBpLFxuICBkeW5hbW9kYlRhYmxlczogW1xuICAgIGNvcmVTdGFjay5keW5hbW9kYlRhYmxlcy51c2Vyc1RhYmxlLFxuICAgIGNvcmVTdGFjay5keW5hbW9kYlRhYmxlcy5wcm9kdWN0c1RhYmxlLFxuICAgIGNvcmVTdGFjay5keW5hbW9kYlRhYmxlcy5vcmRlcnNUYWJsZSxcbiAgICBjb3JlU3RhY2suZHluYW1vZGJUYWJsZXMuaW52ZW50b3J5VGFibGUsXG4gICAgY29yZVN0YWNrLmR5bmFtb2RiVGFibGVzLnNlc3Npb25zVGFibGUsXG4gICAgY29yZVN0YWNrLmR5bmFtb2RiVGFibGVzLmN1c3RvbWVyUHJvZmlsZXNUYWJsZSxcbiAgICBjb3JlU3RhY2suZHluYW1vZGJUYWJsZXMucHVyY2hhc2VIaXN0b3J5VGFibGUsXG4gICAgY29yZVN0YWNrLmR5bmFtb2RiVGFibGVzLnByb2R1Y3RJbnRlcmFjdGlvbnNUYWJsZSxcbiAgICBjb3JlU3RhY2suZHluYW1vZGJUYWJsZXMucmVjb21tZW5kYXRpb25zVGFibGUsXG4gICAgY29yZVN0YWNrLmR5bmFtb2RiVGFibGVzLmFiVGVzdFJlc3VsdHNUYWJsZSxcbiAgICBjb3JlU3RhY2suZHluYW1vZGJUYWJsZXMuY29zdEFuYWx5dGljc1RhYmxlLFxuICAgIGNvcmVTdGFjay5keW5hbW9kYlRhYmxlcy5zZWdtZW50YXRpb25UYWJsZSxcbiAgICBjb3JlU3RhY2suZHluYW1vZGJUYWJsZXMuc3RyZWFtaW5nQW5hbHl0aWNzVGFibGUsXG4gICAgY29yZVN0YWNrLmR5bmFtb2RiVGFibGVzLmFpQW5hbHlzaXNIaXN0b3J5VGFibGUsXG4gIF0sXG4gIGtpbmVzaXNTdHJlYW1zOiBbXG4gICAgc3RyZWFtaW5nU3RhY2sua2luZXNpc1N0cmVhbXMuY3VzdG9tZXJFdmVudHNTdHJlYW0sXG4gICAgc3RyZWFtaW5nU3RhY2sua2luZXNpc1N0cmVhbXMuYW5hbHl0aWNzU3RyZWFtLFxuICBdLFxuICBzcXNRdWV1ZXM6IFtcbiAgICBzdHJlYW1pbmdTdGFjay5zcXNRdWV1ZXMuYWlBbmFseXNpc1F1ZXVlLFxuICAgIHN0cmVhbWluZ1N0YWNrLnNxc1F1ZXVlcy5iYXRjaFByb2Nlc3NpbmdRdWV1ZSxcbiAgICBzdHJlYW1pbmdTdGFjay5zcXNRdWV1ZXMubm90aWZpY2F0aW9uUXVldWUsXG4gICAgc3RyZWFtaW5nU3RhY2suc3FzUXVldWVzLnNlZ21lbnRhdGlvblF1ZXVlLFxuICAgIHN0cmVhbWluZ1N0YWNrLnNxc1F1ZXVlcy5haUFuYWx5c2lzRExRLFxuICAgIHN0cmVhbWluZ1N0YWNrLnNxc1F1ZXVlcy5iYXRjaFByb2Nlc3NpbmdETFEsXG4gICAgc3RyZWFtaW5nU3RhY2suc3FzUXVldWVzLm5vdGlmaWNhdGlvbkRMUSxcbiAgICBzdHJlYW1pbmdTdGFjay5zcXNRdWV1ZXMuc2VnbWVudGF0aW9uRExRLFxuICBdLFxuICBlbnYsXG4gIGRlc2NyaXB0aW9uOiBgT01OSVggQUkgTW9uaXRvcmluZyBJbmZyYXN0cnVjdHVyZSAtICR7ZmluYWxDb25maWcuc3RhZ2V9YCxcbiAgdGFnczoge1xuICAgIEVudmlyb25tZW50OiBmaW5hbENvbmZpZy5zdGFnZSxcbiAgICBQcm9qZWN0OiAnb21uaXgtYWknLFxuICAgIENvbXBvbmVudDogJ21vbml0b3JpbmcnLFxuICAgIE93bmVyOiAnZW5naW5lZXJpbmctdGVhbScsXG4gICAgQ29zdENlbnRlcjogJ3Byb2R1Y3QtZGV2ZWxvcG1lbnQnLFxuICAgIE1hbmFnZWRCeTogJ2F3cy1jZGsnLFxuICB9LFxufSk7XG5cbi8vIEFkZCBkZXBlbmRlbmNpZXMgLSBNb25pdG9yaW5nIHN0YWNrIGRlcGVuZHMgb24gYm90aCBDb3JlIGFuZCBTdHJlYW1pbmcgc3RhY2tzXG5tb25pdG9yaW5nU3RhY2suYWRkRGVwZW5kZW5jeShjb3JlU3RhY2spO1xubW9uaXRvcmluZ1N0YWNrLmFkZERlcGVuZGVuY3koc3RyZWFtaW5nU3RhY2spO1xuXG4vLyBBZGQgZ2xvYmFsIHRhZ3MgdG8gYWxsIHJlc291cmNlc1xuY2RrLlRhZ3Mub2YoYXBwKS5hZGQoJ1Byb2plY3QnLCAnb21uaXgtYWknKTtcbmNkay5UYWdzLm9mKGFwcCkuYWRkKCdFbnZpcm9ubWVudCcsIGZpbmFsQ29uZmlnLnN0YWdlKTtcbmNkay5UYWdzLm9mKGFwcCkuYWRkKCdNYW5hZ2VkQnknLCAnYXdzLWNkaycpO1xuY2RrLlRhZ3Mub2YoYXBwKS5hZGQoJ1JlcG9zaXRvcnknLCAnb21uaXgtYWktaW5mcmFzdHJ1Y3R1cmUnKTtcbmNkay5UYWdzLm9mKGFwcCkuYWRkKCdPd25lcicsICdlbmdpbmVlcmluZy10ZWFtJyk7XG5cbi8vIEFkZCBjb3N0IGFsbG9jYXRpb24gdGFncyBmb3IgcHJvZHVjdGlvblxuaWYgKGZpbmFsQ29uZmlnLnN0YWdlID09PSAncHJvZCcpIHtcbiAgY2RrLlRhZ3Mub2YoYXBwKS5hZGQoJ0Nvc3RDZW50ZXInLCAncHJvZHVjdC1kZXZlbG9wbWVudCcpO1xuICBjZGsuVGFncy5vZihhcHApLmFkZCgnQnVzaW5lc3NVbml0JywgJ2FpLWFuYWx5dGljcycpO1xuICBjZGsuVGFncy5vZihhcHApLmFkZCgnQmlsbGluZ0NvZGUnLCAnb21uaXgtcHJvZC1pbmZyYScpO1xufVxuXG4vLyBBZGQgZGV2ZWxvcG1lbnQgdGFncyBmb3Igbm9uLXByb2R1Y3Rpb24gZW52aXJvbm1lbnRzXG5pZiAoZmluYWxDb25maWcuc3RhZ2UgIT09ICdwcm9kJykge1xuICBjZGsuVGFncy5vZihhcHApLmFkZCgnQXV0b0RlbGV0ZScsICd0cnVlJyk7XG4gIGNkay5UYWdzLm9mKGFwcCkuYWRkKCdEZXZlbG9wZXJBY2Nlc3MnLCAndHJ1ZScpO1xufVxuXG4vLyBTeW50aGVzaXMgYW5kIHZhbGlkYXRpb25cbmFwcC5zeW50aCgpO1xuXG4vLyBMb2cgZGVwbG95bWVudCBpbmZvcm1hdGlvblxuY29uc29sZS5sb2coYFxu8J+agCBPTU5JWCBBSSBJbmZyYXN0cnVjdHVyZSBEZXBsb3ltZW50IENvbmZpZ3VyYXRpb25cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5FbnZpcm9ubWVudDogJHtmaW5hbENvbmZpZy5zdGFnZX1cblJlZ2lvbjogJHtmaW5hbENvbmZpZy5yZWdpb259XG5BY2NvdW50OiAke2Vudi5hY2NvdW50IHx8ICdVc2luZyBkZWZhdWx0IGFjY291bnQnfVxuXG5TdGFja3MgdG8gYmUgZGVwbG95ZWQ6XG7ilJzilIDilIAgQ29yZSBTdGFjayAoJHtnZXRTdGFja05hbWUoJ2NvcmUnLCBmaW5hbENvbmZpZy5zdGFnZSl9KVxu4pSCICAg4pSc4pSA4pSAIExhbWJkYSBGdW5jdGlvbjogb21uaXgtYWktYmFja2VuZC0ke2ZpbmFsQ29uZmlnLnN0YWdlfVxu4pSCICAg4pSc4pSA4pSAIFJFU1QgQVBJOiBvbW5peC1haS1hcGktJHtmaW5hbENvbmZpZy5zdGFnZX1cbuKUgiAgIOKUnOKUgOKUgCBXZWJTb2NrZXQgQVBJOiBvbW5peC1haS13ZWJzb2NrZXQtJHtmaW5hbENvbmZpZy5zdGFnZX1cbuKUgiAgIOKUnOKUgOKUgCBEeW5hbW9EQiBUYWJsZXM6IDE0IHRhYmxlcyB3aXRoIEdTSXNcbuKUgiAgIOKUlOKUgOKUgCBTZWNyZXRzIE1hbmFnZXI6IEpXVCwgQVBJIGtleXMsIGV4dGVybmFsIGNyZWRlbnRpYWxzXG7ilIJcbuKUnOKUgOKUgCBTdHJlYW1pbmcgU3RhY2sgKCR7Z2V0U3RhY2tOYW1lKCdzdHJlYW1pbmcnLCBmaW5hbENvbmZpZy5zdGFnZSl9KVxu4pSCICAg4pSc4pSA4pSAIEtpbmVzaXMgU3RyZWFtczogQ3VzdG9tZXIgZXZlbnRzICgke2ZpbmFsQ29uZmlnLmtpbmVzaXNTaGFyZENvdW50fSBzaGFyZHMpXG7ilIIgICDilJzilIDilIAgU1FTIFF1ZXVlczogQUkgYW5hbHlzaXMsIGJhdGNoIHByb2Nlc3NpbmcsIG5vdGlmaWNhdGlvbnNcbuKUgiAgIOKUlOKUgOKUgCBFdmVudEJyaWRnZTogQ3VzdG9tIGV2ZW50IGJ1cyBmb3IgZGVjb3VwbGVkIGFyY2hpdGVjdHVyZVxu4pSCXG7ilJTilIDilIAgTW9uaXRvcmluZyBTdGFjayAoJHtnZXRTdGFja05hbWUoJ21vbml0b3JpbmcnLCBmaW5hbENvbmZpZy5zdGFnZSl9KVxuICAgIOKUnOKUgOKUgCBDbG91ZFdhdGNoOiBEYXNoYm9hcmRzLCBhbGFybXMsIGN1c3RvbSBtZXRyaWNzXG4gICAg4pSc4pSA4pSAIFNOUzogQWxlcnQgbm90aWZpY2F0aW9uc1xuICAgIOKUlOKUgOKUgCBTY2hlZHVsZWQgRXZlbnRzOiBDbGVhbnVwLCByZXBvcnRpbmcsIGhlYWx0aCBjaGVja3NcblxuQ29uZmlndXJhdGlvbjpcbi0gTGFtYmRhIE1lbW9yeTogJHtmaW5hbENvbmZpZy5sYW1iZGFNZW1vcnlTaXplfSBNQlxuLSBMYW1iZGEgVGltZW91dDogJHtmaW5hbENvbmZpZy5sYW1iZGFUaW1lb3V0fSBzZWNvbmRzXG4tIER5bmFtb0RCIEJpbGxpbmc6ICR7ZmluYWxDb25maWcuZHluYW1vZGJCaWxsaW5nTW9kZX1cbi0gTW9uaXRvcmluZzogJHtmaW5hbENvbmZpZy5lbmFibGVNb25pdG9yaW5nID8gJ0VuYWJsZWQnIDogJ0Rpc2FibGVkJ31cbi0gWC1SYXkgVHJhY2luZzogJHtmaW5hbENvbmZpZy5lbmFibGVYUmF5ID8gJ0VuYWJsZWQnIDogJ0Rpc2FibGVkJ31cbi0gTG9nIFJldGVudGlvbjogJHtmaW5hbENvbmZpZy5sb2dSZXRlbnRpb25EYXlzfSBkYXlzXG5cbkFXUyBCZWRyb2NrIENvbmZpZ3VyYXRpb246XG4tIEJlZHJvY2sgUmVnaW9uOiAke2ZpbmFsQ29uZmlnLmJlZHJvY2tSZWdpb259XG4tIFByaW1hcnkgTW9kZWw6IENsYXVkZSAzIEhhaWt1IChjb3N0LW9wdGltaXplZClcbi0gRmFsbGJhY2sgTW9kZWw6IENsYXVkZSAzIFNvbm5ldCAoaGlnaGVyIGFjY3VyYWN5KVxuXG5EZXBsb3ltZW50IENvbW1hbmRzOlxuLSBEZXBsb3kgQWxsOiBucG0gcnVuIGRlcGxveToke2ZpbmFsQ29uZmlnLnN0YWdlfVxuLSBEZXBsb3kgQ29yZTogY2RrIGRlcGxveSAke2dldFN0YWNrTmFtZSgnY29yZScsIGZpbmFsQ29uZmlnLnN0YWdlKX1cbi0gRGVwbG95IFN0cmVhbWluZzogY2RrIGRlcGxveSAke2dldFN0YWNrTmFtZSgnc3RyZWFtaW5nJywgZmluYWxDb25maWcuc3RhZ2UpfVxuLSBEZXBsb3kgTW9uaXRvcmluZzogY2RrIGRlcGxveSAke2dldFN0YWNrTmFtZSgnbW9uaXRvcmluZycsIGZpbmFsQ29uZmlnLnN0YWdlKX1cblxuTmV4dCBTdGVwczpcbjEuIEVuc3VyZSBBV1MgY3JlZGVudGlhbHMgYXJlIGNvbmZpZ3VyZWRcbjIuIEJ1aWxkIExhbWJkYSBmdW5jdGlvbjogY2QgLi4vYmFja2VuZCAmJiBucG0gcnVuIGJ1aWxkXG4zLiBEZXBsb3kgaW5mcmFzdHJ1Y3R1cmU6IG5wbSBydW4gZGVwbG95OiR7ZmluYWxDb25maWcuc3RhZ2V9XG40LiBSdW4gcG9zdC1kZXBsb3ltZW50IHNjcmlwdHMgZm9yIGRhdGEgc2VlZGluZ1xuNS4gQ29uZmlndXJlIGV4dGVybmFsIEFQSSBrZXlzIGluIFNlY3JldHMgTWFuYWdlclxuNi4gU2V0IHVwIG1vbml0b3JpbmcgYWxlcnRzIGFuZCBub3RpZmljYXRpb25zXG5cbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuYCk7XG5cbmV4cG9ydCB7IGNvcmVTdGFjaywgc3RyZWFtaW5nU3RhY2ssIG1vbml0b3JpbmdTdGFjayB9OyJdfQ==